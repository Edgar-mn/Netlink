import glob
import hmac
import hashlib
import re
import ntpath

LAU_KEY = b'Abcdef0123456789Abcdef0123456789'

# Extract {S: block from message
def split_message(msg):
    m = re.search(r'{S:.*}', msg)
    if m:
        s = m.group(0)
        return msg.replace(s, ''), s 
    else:
        return msg, ''

# Find digest {MDG:
def find_digest(msg):
    m = re.search(r'{MDG:(\w+)}', msg)
    if m: return m.group(1)

# Calculate digest value
def sign(msg):
    dig = hmac.new(LAU_KEY, msg=msg, digestmod=hashlib.sha256).digest()
    return dig.hex().upper()

# Process message
def proc_message(msg):
    msg, s = split_message(msg)
    dig = sign(msg.encode())
    if s:
        d = find_digest(s)
        if d:
            if d != dig:
                print('Warning! Incorrect digest.')
            else:
                print('Digest ok.')
            msg += s.replace(d, dig)
        else:
            msg += '{' + s[1:-1] + '{MDG:' + dig + '}}'
    else:
        msg += '{S:{MDG:' + dig + '}}'
    
    # Add CRLF to each line
    msg_with_crlf = '\r\n'.join(msg.splitlines())
    return msg_with_crlf.encode()

# Read SWIFT message from the specified file
def read_message_from_file(file_path):
    with open(file_path, 'r') as file:
        return file.read()

# Write processed message to a file
def write_message_to_file(file_path, message):
    with open(file_path, 'wb') as file:
        file.write(message)

# Example usage with the specified file path
input_file_path = "C:\\Users\\user\\Downloads\\test.txt"
output_file_path = "C:\\Users\\user\\Downloads\\MTLAU_ACK_processed.txt"

swift_message = read_message_from_file(input_file_path)
processed_message = proc_message(swift_message)
write_message_to_file(output_file_path, processed_message)

print(f"Processed message written to {output_file_path}")
