import hmac
import hashlib

def extract_fields(swift_message):
    fields = {}
    lines = swift_message.splitlines()

    # Extract block and field values
    block_1 = swift_message.split("{1:")[1].split("}")[0]
    block_2 = swift_message.split("{2:")[1].split("}")[0]
    block_3 = swift_message.split("{3:")[1].split("}")[0]

    fields["Block_1"] = block_1
    fields["Block_2"] = block_2
    fields["Block_3"] = block_3

    for line in lines:
        if line.startswith(":20:"):
            fields["Field_20"] = line[4:]
        elif line.startswith(":79:"):
            fields["Field_79"] = line[4:]

    return fields

def generate_lau(swift_message):
    left_lau_key = "Abcdef1234567890"
    right_lau_key = "Abcdef1234567890"
    hashed_message = ""

    if len(left_lau_key) == 16 and len(right_lau_key) == 16:
        try:
            # Extract relevant fields from the SWIFT message
            fields = extract_fields(swift_message)
            
            # Concatenate relevant fields and blocks
            concatenated_fields = (
                fields.get("Block_1", "") +
                fields.get("Block_2", "") +
                fields.get("Block_3", "") +
                fields.get("Field_20", "") +
                fields.get("Field_79", "")
            ).encode('ascii')

            # Generate the LAU key
            swift_key = (left_lau_key + right_lau_key).encode('ascii')

            # Calculate the HMAC-SHA256 hash
            hmac_obj = hmac.new(swift_key, concatenated_fields, hashlib.sha256)
            hashed_message = hmac_obj.hexdigest().upper()
        except Exception as e:
            hashed_message = str(e)
    
    return hashed_message

# Example usage with the provided SWIFT message
swift_message = """{1:F01PTSQGBB0XFIT0183000001}{2:I199PTSQGBB0XFITU3}{3:{108:swiftuser6Lau}}{4:
:20:1311202415
:79:SAA Tesla Branch Filesystem
look in incoming messages
-}"""

lau_value = generate_lau(swift_message)
print(f"LAU Value: {lau_value}")
